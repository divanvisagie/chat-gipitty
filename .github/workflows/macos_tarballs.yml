name: Build and Release macOS Tarballs

on:
  push:
    branches: [ "builds" ]

jobs:
  build-and-release:
    runs-on: macos-latest
    strategy:
      matrix:
        target: [x86_64-apple-darwin, aarch64-apple-darwin]

    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Setup Rust
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          override: true

      - name: Build and Package
        shell: bash
        run: |
          make release
          BINARY_NAME=cgip
          RELEASE_DIR=./release
          PLATFORM=$(uname -s | tr '[:upper:]' '[:lower:]')
          ARCH=$(uname -m | tr '[:upper:]' '[:lower:]')
          mkdir -p $RELEASE_DIR
          cp docs/cgip.1 target/release/
          tar -czf $RELEASE_DIR/$BINARY_NAME-$PLATFORM-$ARCH.tar.gz -C target/release $BINARY_NAME cgip.1

      - name: Determine Tag
        id: determine_tag
        run: |
          if [[ "${GITHUB_REF_TYPE}" == "tag" ]]; then
            echo "tag_name=${GITHUB_REF_NAME}" >> $GITHUB_ENV
          else
            echo "No tag, using test-release"
            echo "tag_name=test-release" >> $GITHUB_ENV
          fi

      - name: Check if Release Exists
        id: check_release
        uses: octokit/request-action@v2.x
        with:
          route: GET /repos/${{ github.repository }}/releases/tags/${{ env.tag_name }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        continue-on-error: true

      - name: Create Release
        id: create_release
        if: steps.check_release.outputs.cache_hit != 'true'
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ env.tag_name }}
          release_name: Release ${{ env.tag_name }}
          draft: false
          prerelease: false

      - name: Upload Release Asset
        if: steps.create_release.outputs.upload_url != ''
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./release/cgip-*.tar.gz
          asset_name: cgip-${{ env.tag_name }}.tar.gz
          asset_content_type: application/gzip
